{"version":3,"sources":["skylark-jquery-textcomplete-all.js"],"names":["defin","$","id","fn","textcomplete","strategies","option","args","Array","prototype","slice","call","arguments","this","each","$this","completer","data","_oid","Completer","shift","apply","removeData","obj","name","message","console","warn","register","Strategy","parse","el","$el","define","memoize","func","memo","term","callback","concat","options","extend","cache","search","strategiesArray","params","map","strategy","strategyObj","match","replace","context","index","template","idProperty","locked","queuedArgsToReplay","uniqueId","initializedEditors","element","views","defaults","is","isContentEditable","contentEditable","Error","ownerDocument","activeElement","initialize","self","one","adapter","CKEDITOR","on","event","inArray","editor","push","event2","editable","ckeditor_instance","appendTo","className","dropdownClassName","maxCount","zIndex","rightEdgeOffset","dropdown","$iframe","Adapter","viewName","get","prop","document","window","frames","length","iframeIndex","frameElement","Dropdown","selectionEnd","destroy","off","deactivate","trigger","text","skipUnchangedTerm","getTextFromHeadToCaret","searchQuery","_extractSearchQuery","_term","_search","fire","eventName","select","value","e","focus","_clearAtNext","i","matchRegexp","isFunction","Object","toString","free","stillSearching","shown","activate","clear","setPosition","getCaretPosition","render","_zip","unshift","replayOrFree","replayArgs","undefined","ContentEditable","pre","sel","getSelection","range","getRangeAt","selection","cloneRange","selectNodeContents","startContainer","regExp","content","post","substring","startOffset","newSubstr","isArray","deleteContents","preWrapper","createElement","innerHTML","postWrapper","childNode","lastOfPre","fragment","createDocumentFragment","firstChild","appendChild","insertNode","setStartAfter","collapse","removeAllRanges","addRange","_getCaretRelativePosition","wrapperNode","endContainer","parentNode","node","setTimeout","normalize","$node","position","offset","left","top","height","lineHeight","iframePosition","contentWindow","scrollTop","remove","Textarea","val","selectionStart","p","getCaretCoordinates","_calculateLineHeight","scrollLeft","parseInt","css","isNaN","temp","nodeName","style","setAttribute","fontFamily","fontSize","clientHeight","removeChild","main","require","error"],"mappings":"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","file":"../skylark-jquery-textcomplete-all.js","sourcesContent":["defin([\n  \"skylark-jquery\"\n],function ($) {\n  'use strict';\n\n  var warn = function (message) {\n    if (console.warn) { console.warn(message); }\n  };\n\n  var id = 1;\n\n  $.fn.textcomplete = function (strategies, option) {\n    var args = Array.prototype.slice.call(arguments);\n    return this.each(function () {\n      var self = this;\n      var $this = $(this);\n      var completer = $this.data('textComplete');\n      if (!completer) {\n        option || (option = {});\n        option._oid = id++;  // unique object id\n        completer = new $.fn.textcomplete.Completer(this, option);\n        $this.data('textComplete', completer);\n      }\n      if (typeof strategies === 'string') {\n        if (!completer) return;\n        args.shift()\n        completer[strategies].apply(completer, args);\n        if (strategies === 'destroy') {\n          $this.removeData('textComplete');\n        }\n      } else {\n        // For backward compatibility.\n        // TODO: Remove at v0.4\n        $.each(strategies, function (obj) {\n          $.each(['header', 'footer', 'placement', 'maxCount'], function (name) {\n            if (obj[name]) {\n              completer.option[name] = obj[name];\n              warn(name + 'as a strategy param is deprecated. Use option.');\n              delete obj[name];\n            }\n          });\n        });\n        completer.register($.fn.textcomplete.Strategy.parse(strategies, {\n          el: self,\n          $el: $this\n        }));\n      }\n    });\n  };\n\n});\n\ndefine(\"skylark-jquery-textcomplete/textcomplete\", function(){});\n\ndefin([\n  \"skylark-jquery\",\n  \"./textcomplete\"\n],function ($) {\n  'use strict';\n\n  // Memoize a search function.\n  var memoize = function (func) {\n    var memo = {};\n    return function (term, callback) {\n      if (memo[term]) {\n        callback(memo[term]);\n      } else {\n        func.call(this, term, function (data) {\n          memo[term] = (memo[term] || []).concat(data);\n          callback.apply(null, arguments);\n        });\n      }\n    };\n  };\n\n  function Strategy(options) {\n    $.extend(this, options);\n    if (this.cache) { this.search = memoize(this.search); }\n  }\n\n  Strategy.parse = function (strategiesArray, params) {\n    return $.map(strategiesArray, function (strategy) {\n      var strategyObj = new Strategy(strategy);\n      strategyObj.el = params.el;\n      strategyObj.$el = params.$el;\n      return strategyObj;\n    });\n  };\n\n  $.extend(Strategy.prototype, {\n    // Public properties\n    // -----------------\n\n    // Required\n    match:      null,\n    replace:    null,\n    search:     null,\n\n    // Optional\n    id:         null,\n    cache:      false,\n    context:    function () { return true; },\n    index:      2,\n    template:   function (obj) { return obj; },\n    idProperty: null\n  });\n\n  $.fn.textcomplete.Strategy = Strategy;\n\n});\n\ndefine(\"skylark-jquery-textcomplete/strategy\", function(){});\n\ndefin([\n  \"skylark-jquery\",\n  \"./textcomplete\",\n  \"./dropdown\"\n],function ($) {\n  'use strict';\n\n  // Exclusive execution control utility.\n  //\n  // func - The function to be locked. It is executed with a function named\n  //        `free` as the first argument. Once it is called, additional\n  //        execution are ignored until the free is invoked. Then the last\n  //        ignored execution will be replayed immediately.\n  //\n  // Examples\n  //\n  //   var lockedFunc = lock(function (free) {\n  //     setTimeout(function { free(); }, 1000); // It will be free in 1 sec.\n  //     console.log('Hello, world');\n  //   });\n  //   lockedFunc();  // => 'Hello, world'\n  //   lockedFunc();  // none\n  //   lockedFunc();  // none\n  //   // 1 sec past then\n  //   // => 'Hello, world'\n  //   lockedFunc();  // => 'Hello, world'\n  //   lockedFunc();  // none\n  //\n  // Returns a wrapped function.\n  var lock = function (func) {\n    var locked, queuedArgsToReplay;\n\n    return function () {\n      // Convert arguments into a real array.\n      var args = Array.prototype.slice.call(arguments);\n      if (locked) {\n        // Keep a copy of this argument list to replay later.\n        // OK to overwrite a previous value because we only replay\n        // the last one.\n        queuedArgsToReplay = args;\n        return;\n      }\n      locked = true;\n      var self = this;\n      args.unshift(function replayOrFree() {\n        if (queuedArgsToReplay) {\n          // Other request(s) arrived while we were locked.\n          // Now that the lock is becoming available, replay\n          // the latest such request, then call back here to\n          // unlock (or replay another request that arrived\n          // while this one was in flight).\n          var replayArgs = queuedArgsToReplay;\n          queuedArgsToReplay = undefined;\n          replayArgs.unshift(replayOrFree);\n          func.apply(self, replayArgs);\n        } else {\n          locked = false;\n        }\n      });\n      func.apply(this, args);\n    };\n  };\n\n  var isString = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n  };\n\n  var uniqueId = 0;\n  var initializedEditors = [];\n\n  function Completer(element, option) {\n    this.$el        = $(element);\n    this.id         = 'textcomplete' + uniqueId++;\n    this.strategies = [];\n    this.views      = [];\n    this.option     = $.extend({}, Completer.defaults, option);\n\n    if (!this.$el.is('input[type=text]') && !this.$el.is('input[type=search]') && !this.$el.is('textarea') && !element.isContentEditable && element.contentEditable != 'true') {\n      throw new Error('textcomplete must be called on a Textarea or a ContentEditable.');\n    }\n\n    // use ownerDocument to fix iframe / IE issues\n    if (element === element.ownerDocument.activeElement) {\n      // element has already been focused. Initialize view objects immediately.\n      this.initialize()\n    } else {\n      // Initialize view objects lazily.\n      var self = this;\n      this.$el.one('focus.' + this.id, function () { self.initialize(); });\n\n      // Special handling for CKEditor: lazy init on instance load\n      if ((!this.option.adapter || this.option.adapter == 'CKEditor') && typeof CKEDITOR != 'undefined' && (this.$el.is('textarea'))) {\n        CKEDITOR.on(\"instanceReady\", function(event) { //For multiple ckeditors on one page: this needs to be executed each time a ckeditor-instance is ready.\n\n          if($.inArray(event.editor.id, initializedEditors) == -1) { //For multiple ckeditors on one page: focus-eventhandler should only be added once for every editor.\n            initializedEditors.push(event.editor.id);\n\t\t\t\n            event.editor.on(\"focus\", function(event2) {\n\t\t\t\t//replace the element with the Iframe element and flag it as CKEditor\n\t\t\t\tself.$el = $(event.editor.editable().$);\n\t\t\t\tif (!self.option.adapter) {\n\t\t\t\t\tself.option.adapter = $.fn.textcomplete['CKEditor'];\n\t\t\t\t}\n\t\t\t\tself.option.ckeditor_instance = event.editor; //For multiple ckeditors on one page: in the old code this was not executed when adapter was alread set. So we were ALWAYS working with the FIRST instance.\n              \tself.initialize();\n            });\n          }\n        });\n      }\n    }\n  }\n\n  Completer.defaults = {\n    appendTo: 'body',\n    className: '',  // deprecated option\n    dropdownClassName: 'dropdown-menu textcomplete-dropdown',\n    maxCount: 10,\n    zIndex: '100',\n    rightEdgeOffset: 30\n  };\n\n  $.extend(Completer.prototype, {\n    // Public properties\n    // -----------------\n\n    id:         null,\n    option:     null,\n    strategies: null,\n    adapter:    null,\n    dropdown:   null,\n    $el:        null,\n    $iframe:    null,\n\n    // Public methods\n    // --------------\n\n    initialize: function () {\n      var element = this.$el.get(0);\n      \n      // check if we are in an iframe\n      // we need to alter positioning logic if using an iframe\n      if (this.$el.prop('ownerDocument') !== document && window.frames.length) {\n        for (var iframeIndex = 0; iframeIndex < window.frames.length; iframeIndex++) {\n          if (this.$el.prop('ownerDocument') === window.frames[iframeIndex].document) {\n            this.$iframe = $(window.frames[iframeIndex].frameElement);\n            break;\n          }\n        }\n      }\n      \n      \n      // Initialize view objects.\n      this.dropdown = new $.fn.textcomplete.Dropdown(element, this, this.option);\n      var Adapter, viewName;\n      if (this.option.adapter) {\n        Adapter = this.option.adapter;\n      } else {\n        if (this.$el.is('textarea') || this.$el.is('input[type=text]') || this.$el.is('input[type=search]')) {\n          viewName = typeof element.selectionEnd === 'number' ? 'Textarea' : 'IETextarea';\n        } else {\n          viewName = 'ContentEditable';\n        }\n        Adapter = $.fn.textcomplete[viewName];\n      }\n      this.adapter = new Adapter(element, this, this.option);\n    },\n\n    destroy: function () {\n      this.$el.off('.' + this.id);\n      if (this.adapter) {\n        this.adapter.destroy();\n      }\n      if (this.dropdown) {\n        this.dropdown.destroy();\n      }\n      this.$el = this.adapter = this.dropdown = null;\n    },\n\n    deactivate: function () {\n      if (this.dropdown) {\n        this.dropdown.deactivate();\n      }\n    },\n\n    // Invoke textcomplete.\n    trigger: function (text, skipUnchangedTerm) {\n      if (!this.dropdown) { this.initialize(); }\n      text != null || (text = this.adapter.getTextFromHeadToCaret());\n      var searchQuery = this._extractSearchQuery(text);\n      if (searchQuery.length) {\n        var term = searchQuery[1];\n        // Ignore shift-key, ctrl-key and so on.\n        if (skipUnchangedTerm && this._term === term && term !== \"\") { return; }\n        this._term = term;\n        this._search.apply(this, searchQuery);\n      } else {\n        this._term = null;\n        this.dropdown.deactivate();\n      }\n    },\n\n    fire: function (eventName) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      this.$el.trigger(eventName, args);\n      return this;\n    },\n\n    register: function (strategies) {\n      Array.prototype.push.apply(this.strategies, strategies);\n    },\n\n    // Insert the value into adapter view. It is called when the dropdown is clicked\n    // or selected.\n    //\n    // value    - The selected element of the array callbacked from search func.\n    // strategy - The Strategy object.\n    // e        - Click or keydown event object.\n    select: function (value, strategy, e) {\n      this._term = null;\n      this.adapter.select(value, strategy, e);\n      this.fire('change').fire('textComplete:select', value, strategy);\n      this.adapter.focus();\n    },\n\n    // Private properties\n    // ------------------\n\n    _clearAtNext: true,\n    _term:        null,\n\n    // Private methods\n    // ---------------\n\n    // Parse the given text and extract the first matching strategy.\n    //\n    // Returns an array including the strategy, the query term and the match\n    // object if the text matches an strategy; otherwise returns an empty array.\n    _extractSearchQuery: function (text) {\n      for (var i = 0; i < this.strategies.length; i++) {\n        var strategy = this.strategies[i];\n        var context = strategy.context(text);\n        if (context || context === '') {\n          var matchRegexp = $.isFunction(strategy.match) ? strategy.match(text) : strategy.match;\n          if (isString(context)) { text = context; }\n          var match = text.match(matchRegexp);\n          if (match) { return [strategy, match[strategy.index], match]; }\n        }\n      }\n      return []\n    },\n\n    // Call the search method of selected strategy..\n    _search: lock(function (free, strategy, term, match) {\n      var self = this;\n      strategy.search(term, function (data, stillSearching) {\n        if (!self.dropdown.shown) {\n          self.dropdown.activate();\n        }\n        if (self._clearAtNext) {\n          // The first callback in the current lock.\n          self.dropdown.clear();\n          self._clearAtNext = false;\n        }\n        self.dropdown.setPosition(self.adapter.getCaretPosition());\n        self.dropdown.render(self._zip(data, strategy, term));\n        if (!stillSearching) {\n          // The last callback in the current lock.\n          free();\n          self._clearAtNext = true; // Call dropdown.clear at the next time.\n        }\n      }, match);\n    }),\n\n    // Build a parameter for Dropdown#render.\n    //\n    // Examples\n    //\n    //  this._zip(['a', 'b'], 's');\n    //  //=> [{ value: 'a', strategy: 's' }, { value: 'b', strategy: 's' }]\n    _zip: function (data, strategy, term) {\n      return $.map(data, function (value) {\n        return { value: value, strategy: strategy, term: term };\n      });\n    }\n  });\n\n  $.fn.textcomplete.Completer = Completer;\n});\n\ndefine(\"skylark-jquery-textcomplete/completer\", function(){});\n\ndefin([\n  \"skylark-jquery\",\n  \"./textcomplete\"\n],function ($) {\n  'use strict';\n\n  // ContentEditable adapter\n  // =======================\n  //\n  // Adapter for contenteditable elements.\n  function ContentEditable (element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(ContentEditable.prototype, $.fn.textcomplete.Adapter.prototype, {\n    // Public methods\n    // --------------\n\n    // Update the content with the given value and strategy.\n    // When an dropdown item is selected, it is executed.\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      // use ownerDocument instead of window to support iframes\n      var sel = this.el.ownerDocument.getSelection();\n      \n      var range = sel.getRangeAt(0);\n      var selection = range.cloneRange();\n      selection.selectNodeContents(range.startContainer);\n      var content = selection.toString();\n      var post = content.substring(range.startOffset);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr)\n            .replace(/ $/, \"&nbsp\"); // &nbsp necessary at least for CKeditor to not eat spaces\n        range.selectNodeContents(range.startContainer);\n        range.deleteContents();\n        \n        // create temporary elements\n        var preWrapper = this.el.ownerDocument.createElement(\"div\");\n        preWrapper.innerHTML = pre;\n        var postWrapper = this.el.ownerDocument.createElement(\"div\");\n        postWrapper.innerHTML = post;\n        \n        // create the fragment thats inserted\n        var fragment = this.el.ownerDocument.createDocumentFragment();\n        var childNode;\n        var lastOfPre;\n        while (childNode = preWrapper.firstChild) {\n        \tlastOfPre = fragment.appendChild(childNode);\n        }\n        while (childNode = postWrapper.firstChild) {\n        \tfragment.appendChild(childNode);\n        }\n        \n        // insert the fragment & jump behind the last node in \"pre\"\n        range.insertNode(fragment);\n        range.setStartAfter(lastOfPre);\n        \n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    },\n\n    // Private methods\n    // ---------------\n\n    // Returns the caret's relative position from the contenteditable's\n    // left top corner.\n    //\n    // Examples\n    //\n    //   this._getCaretRelativePosition()\n    //   //=> { top: 18, left: 200, lineHeight: 16 }\n    //\n    // Dropdown's position will be decided using the result.\n    _getCaretRelativePosition: function () {\n      var range = this.el.ownerDocument.getSelection().getRangeAt(0).cloneRange();\n      var wrapperNode = range.endContainer.parentNode;\n      var node = this.el.ownerDocument.createElement('span');\n      range.insertNode(node);\n      range.selectNodeContents(node);\n      range.deleteContents();\n      setTimeout(function() { wrapperNode.normalize(); }, 0);\n      var $node = $(node);\n      var position = $node.offset();\n      position.left -= this.$el.offset().left;\n      position.top += $node.height() - this.$el.offset().top;\n      position.lineHeight = $node.height();\n      \n      // special positioning logic for iframes\n      // this is typically used for contenteditables such as tinymce or ckeditor\n      if (this.completer.$iframe) {\n        var iframePosition = this.completer.$iframe.offset();\n        position.top += iframePosition.top;\n        position.left += iframePosition.left;\n        // We need to get the scrollTop of the html-element inside the iframe and not of the body-element,\n        // because on IE the scrollTop of the body-element (this.$el) is always zero.\n        position.top -= $(this.completer.$iframe[0].contentWindow.document).scrollTop();\n      }\n      \n      $node.remove();\n      return position;\n    },\n\n    // Returns the string between the first character and the caret.\n    // Completer will be triggered with the result for start autocompleting.\n    //\n    // Example\n    //\n    //   // Suppose the html is '<b>hello</b> wor|ld' and | is the caret.\n    //   this.getTextFromHeadToCaret()\n    //   // => ' wor'  // not '<b>hello</b> wor'\n    getTextFromHeadToCaret: function () {\n      var range = this.el.ownerDocument.getSelection().getRangeAt(0);\n      var selection = range.cloneRange();\n      selection.selectNodeContents(range.startContainer);\n      return selection.toString().substring(0, range.startOffset);\n    }\n  });\n\n  $.fn.textcomplete.ContentEditable = ContentEditable;\n\n});\n\ndefine(\"skylark-jquery-textcomplete/content_editable\", function(){});\n\ndefin([\n  \"skylark-jquery\",\n  \"./textcomplete\",\n  \"./adapter\",\n  \"./vendor/textarea_caret\"\n],function ($) {\n  'use strict';\n\n  // Textarea adapter\n  // ================\n  //\n  // Managing a textarea. It doesn't know a Dropdown.\n  function Textarea(element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(Textarea.prototype, $.fn.textcomplete.Adapter.prototype, {\n    // Public methods\n    // --------------\n\n    // Update the textarea with the given value and strategy.\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      var post = this.el.value.substring(this.el.selectionEnd);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr);\n        this.$el.val(pre + post);\n        this.el.selectionStart = this.el.selectionEnd = pre.length;\n      }\n    },\n\n    getTextFromHeadToCaret: function () {\n      return this.el.value.substring(0, this.el.selectionEnd);\n    },\n\n    // Private methods\n    // ---------------\n\n    _getCaretRelativePosition: function () {\n      var p = $.fn.textcomplete.getCaretCoordinates(this.el, this.el.selectionStart);\n      return {\n        top: p.top + this._calculateLineHeight() - this.$el.scrollTop(),\n        left: p.left - this.$el.scrollLeft(),\n        lineHeight: this._calculateLineHeight()\n      };\n    },\n\n    _calculateLineHeight: function () {\n      var lineHeight = parseInt(this.$el.css('line-height'), 10);\n      if (isNaN(lineHeight)) {\n        // http://stackoverflow.com/a/4515470/1297336\n        var parentNode = this.el.parentNode;\n        var temp = document.createElement(this.el.nodeName);\n        var style = this.el.style;\n        temp.setAttribute(\n          'style',\n          'margin:0px;padding:0px;font-family:' + style.fontFamily + ';font-size:' + style.fontSize\n        );\n        temp.innerHTML = 'test';\n        parentNode.appendChild(temp);\n        lineHeight = temp.clientHeight;\n        parentNode.removeChild(temp);\n      }\n      return lineHeight;\n    }\n  });\n\n  $.fn.textcomplete.Textarea = Textarea;\n});\n\ndefine(\"skylark-jquery-textcomplete/textarea\", function(){});\n\ndefine('skylark-jquery-textcomplete/main',[\r\n\t\"./textcomplete\",\r\n\t\"./strategy\",\r\n\t\"./completer\",\r\n\t\"./content_editable\",\r\n\t\"./textarea\"\r\n],function(){\r\n\t\r\n});\ndefine('skylark-jquery-textcomplete', ['skylark-jquery-textcomplete/main'], function (main) { return main; });\n\n"]}